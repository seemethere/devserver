apiVersion: apps/v1
kind: Deployment
metadata:
  name: bastion
  namespace: devserver-bastion
  labels:
    app: bastion
    component: bastion
    phase: "2"
spec:
  replicas: 2  # HA setup
  selector:
    matchLabels:
      app: bastion
  template:
    metadata:
      labels:
        app: bastion
        component: bastion
        phase: "2"
    spec:
      serviceAccountName: bastion
      securityContext:
        fsGroup: 1000
        # SSH daemon needs to run as root to read host keys and bind to port 22
        runAsUser: 0
      
      containers:
      - name: bastion
        image: devserver/bastion:phase2  # Updated for Phase 2
        imagePullPolicy: Always
        
        ports:
        - containerPort: 22
          name: ssh
          protocol: TCP
        
        env:
        - name: CLUSTER_NAME
          value: "development"
        - name: BASTION_TEST_USER
          value: "testuser"
        - name: BASTION_TEST_UID
          value: "1000"
        # Demo SSH key for Phase 2 testing (replaced by deploy script)
        - name: BASTION_TEST_SSH_KEY
          value: "DEMO_SSH_KEY_PLACEHOLDER"
        
        resources:
          requests:
            memory: "256Mi"
            cpu: "250m"
          limits:
            memory: "512Mi"
            cpu: "500m"
        
        livenessProbe:
          tcpSocket:
            port: 22
          initialDelaySeconds: 30
          periodSeconds: 30
          timeoutSeconds: 5
        
        readinessProbe:
          tcpSocket:
            port: 22
          initialDelaySeconds: 5
          periodSeconds: 10
          timeoutSeconds: 3
        
        volumeMounts:
        - name: tmp
          mountPath: /tmp
        - name: shared-data
          mountPath: /shared
      
      # User Controller Sidecar - Secure User Provisioning
      - name: user-controller
        image: devserver/bastion:phase2  # Same image, different command
        imagePullPolicy: Always
        
        command: ["python3", "/usr/local/bin/user-controller.py"]
        
        env:
        - name: PYTHONUNBUFFERED
          value: "1"
        
        resources:
          requests:
            memory: "128Mi"
            cpu: "100m"
          limits:
            memory: "256Mi"
            cpu: "200m"
        
        # Controller health check - check if it can list namespaces
        livenessProbe:
          exec:
            command:
            - python3
            - -c
            - |
              import subprocess
              result = subprocess.run(['kubectl', 'get', 'namespaces'], capture_output=True, timeout=10)
              exit(0 if result.returncode == 0 else 1)
          initialDelaySeconds: 30
          periodSeconds: 60
          timeoutSeconds: 15
        
        readinessProbe:
          exec:
            command:
            - python3
            - -c
            - "import os; exit(0 if os.path.exists('/shared') else 1)"
          initialDelaySeconds: 5
          periodSeconds: 10
          timeoutSeconds: 3
        
        volumeMounts:
        - name: shared-data
          mountPath: /shared
        
      volumes:
      - name: tmp
        emptyDir: {}
      - name: shared-data
        emptyDir: {}  # Shared communication between bastion and controller
      
      # Anti-affinity to spread bastion pods across nodes
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - bastion
              topologyKey: kubernetes.io/hostname
