apiVersion: v1
kind: ServiceAccount
metadata:
  name: bastion
  namespace: devserver-bastion
  labels:
    component: bastion
    phase: "1"

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: bastion-controller
  labels:
    component: bastion
    phase: "2"
rules:
# Controller needs to read cluster info and manage namespaces
- apiGroups: [""]
  resources: ["nodes", "namespaces"]
  verbs: ["get", "list", "create"]

# Controller needs to create ServiceAccounts and manage RBAC
- apiGroups: [""]
  resources: ["serviceaccounts", "secrets"]
  verbs: ["get", "list", "create", "update", "patch"]

- apiGroups: ["rbac.authorization.k8s.io"]
  resources: ["roles", "rolebindings"]
  verbs: ["get", "list", "create", "update", "patch"]

# Controller needs to create tokens for users
- apiGroups: [""]
  resources: ["serviceaccounts/token"]
  verbs: ["create"]

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: bastion-controller
  labels:
    component: bastion
    phase: "2"
subjects:
- kind: ServiceAccount
  name: bastion
  namespace: devserver-bastion
roleRef:
  kind: ClusterRole
  name: bastion-controller
  apiGroup: rbac.authorization.k8s.io

# Note: User-specific permissions are now created dynamically 
# by the user-controller for each dev-<username> namespace.
# No additional ClusterRoles needed - security through namespace isolation.
